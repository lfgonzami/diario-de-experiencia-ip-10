using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Proyecto_Conecta_4
{
    class Conecta4
    {
        public static string nombrejugador1 = "";
        public static string nombrejugador2 = "";
        static int filas = 6;
        static int columnas = 7;
        static int conecta = 4;
        static string jugador_1 = "o";
        static string jugador_2 = "x";
        static string espacio_vacio = " ";
        // Opciones del menú
        static int modo_hvsh = 1;
        static int modo_hvscpu = 2;
        static int salir = 3;
        // Otras constantes
        static int error_fila_invalidad = 10;
        static int error_columna_llena = 10;
        static int error_ninguno = 10;
        static int conecta_arriba = 10;
        static int conecta_abajo_derecha = 10;
        static int conecta_arriba_derecha = 10;
        static int no_conecta = 10;
        static int fila_no_encontrada = 10;
        static int columna_ganadora_no_encontrada = 10;
        static int conecta_derecha = 10;
        static string jugador_cpu_2 = jugador_2;
        static string jugador_cpu_1 = jugador_1;

        static string[,] clonarMatriz(string[,] tableroOriginal)
        {
            return tableroOriginal.Clone() as string[,];
        }

        static int obtenerColumnaGanadora(string jugador, string[,] tableroOriginal)
        {
            string[,] tablero = new string[filas, columnas];
            int i;
            for (i = 0; i < columnas; i++)
            {
                tablero = clonarMatriz(tableroOriginal);
                int resultado = colocarPieza(jugador, i, tablero);
                if (resultado == error_ninguno)
                {
                    int gana = ganador(jugador, tablero);
                    if (gana != no_conecta)
                    {
                        return i;
                    }
                }
            }
            return columna_ganadora_no_encontrada;
        }

        static int obtenerPrimeraFilaLlena(int columna, string[,] tablero)
        {
            int i;
            for (i = 0; i < filas; ++i)
            {
                if (tablero[i, columna] != espacio_vacio)
                {
                    return i;
                }
            }
            return fila_no_encontrada;
        }

       static (int, int) obtenerColumnaEnLaQueSeObtieneMayorPuntaje(string jugador, string[,] tableroOriginal)
        {

            int conteoMayor = 0, indiceColumnaConConteoMayor = -1;
            string[,] tablero = new string[filas, columnas];
            int i;
            for (i = 0; i < columnas; ++i)
            {
                tablero = clonarMatriz(tableroOriginal);
                int estado = colocarPieza(jugador, i, tablero);
                if (estado == error_ninguno)
                {
                    int filaDePiezaRecienColocada = obtenerPrimeraFilaLlena(i, tablero);
                    if (filaDePiezaRecienColocada != fila_no_encontrada)
                    {
                        int c = contarArriba(i, filaDePiezaRecienColocada, jugador, tablero);
                        if (c > conteoMayor)
                        {
                            conteoMayor = c;
                            indiceColumnaConConteoMayor = i;
                        }
                        c = contarArribaDerecha(i, filaDePiezaRecienColocada, jugador, tablero);
                        if (c > conteoMayor)
                        {
                            conteoMayor = c;
                            indiceColumnaConConteoMayor = i;
                        }
                        c = contarDerecha(i, filaDePiezaRecienColocada, jugador, tablero);
                        if (c > conteoMayor)
                        {
                            conteoMayor = c;
                            indiceColumnaConConteoMayor = i;
                        }
                        c = contarAbajoDerecha(i, filaDePiezaRecienColocada, jugador, tablero);
                        if (c > conteoMayor)
                        {
                            conteoMayor = c;
                            indiceColumnaConConteoMayor = i;
                        }
                    }
                }
            }
            return (conteoMayor, indiceColumnaConConteoMayor);  
        }



        static int obtenerColumnaAleatoria(string jugador, string[,] tableroOriginal)
        {
            while (true)
            {
                string[,] tablero = new string[filas, columnas];
                tablero = clonarMatriz(tableroOriginal);
                int columna = aleatorio_en_rango(0, columnas - 1);
                int resultado = colocarPieza(jugador, columna, tablero);
                if (resultado == error_ninguno)
                {
                    return columna;
                }
            }
        }

        static int obtenerColumnaCentral(string jugador, string[,] tableroOriginal)
        {
            string[,] tablero = new string[filas, columnas];
            tablero = clonarMatriz(tableroOriginal);
            int mitad = (columnas - 1) / 2;
            int resultado = colocarPieza(jugador, mitad, tablero);
            if (resultado == error_ninguno)
            {
                return mitad;
            }
            return columna_ganadora_no_encontrada;
        }

        static int elegirColumnaCpu(string jugador, string[,] tablero)
        {

            int columna = obtenerColumnaAleatoria(jugador, tablero);
            if (columna != fila_no_encontrada)
            {
                return columna;
            }
            return 0;
        }



        static int solicitarColumnaAJugador()
        {
            Console.Write("Escribe la columna en donde colocar la pieza: ");
            int columna = Convert.ToInt32(Console.ReadLine());
            // Necesitamos índices de arreglos
            columna--;
            return columna;
        }
        static string elegirJugadorAlAzar()
        {
            int numero = aleatorio_en_rango(0, 1);
            if (numero == 1)
            {
                return jugador_1;
            }
            else
            {
                return jugador_2;
            }
        }
        static string obtenerOponente(string jugador)
        {
            if (jugador == jugador_1)
            {
                return jugador_2;
            }
            else
            {
                return jugador_1;
            }
        }
        static int aleatorio_en_rango(int minimo, int maximo)
        {
            Random rnd = new Random();
            return rnd.Next(minimo, maximo + 1);
        }

        static int obtenerFilaDesocupada(int columna, string[,] tablero)
        {
            int i;
            for (i = filas - 1; i >= 0; i--)
            {
                if (tablero[i, columna] == espacio_vacio)
                {
                    return i;
                }
            }
            return fila_no_encontrada;
        }
        static int colocarPieza(string jugador, int columna, string[,] tablero)
        {
            if (columna < 0 || columna >= columnas)
            {
                return error_fila_invalidad;
            }
            int fila = obtenerFilaDesocupada(columna, tablero);
            if (fila == fila_no_encontrada)
            {
                return error_columna_llena;
            }
            tablero[fila, columna] = jugador;
            return error_ninguno;
        }
        static void limpiarTablero(string[,] tablero)
        {
            int i;
            for (i = 0; i < filas; ++i)
            {
                int j;
                for (j = 0; j < columnas; ++j)
                {
                    tablero[i, j] = espacio_vacio;
                }
            }
        }
        static void dibujarEncabezado(int columnas)
        {
            Console.Write("\n");
            int i;
            for (i = 0; i < columnas; ++i)
            {
                Console.Write("|" + (i + 1));
                if (i + 1 >= columnas)
                {
                    Console.Write("|");
                }

            }
        }

        static int dibujarTablero(string[,] tablero)
        {
            dibujarEncabezado(columnas);
            Console.Write("\n");
            int i;
            for (i = 0; i < filas; ++i)
            {
                int j;
                for (j = 0; j < columnas; ++j)
                {
                    Console.Write("|" + tablero[i, j]);
                    if (j + 1 >= columnas)
                    {
                        Console.Write("|");
                    }
                }
                Console.Write("\n");
            }
            return 0;
        }
        static bool esEmpate(string[,] tablero)
        {
            int i;
            for (i = 0; i < columnas; ++i)
            {
                int resultado = obtenerFilaDesocupada(i, tablero);
                if (resultado != fila_no_encontrada)
                {
                    return false;
                }
            }
            return true;
        }
        static int contarArriba(int x, int y, string jugador, string[,] tablero)
        {
            int yInicio = (y - conecta >= 0) ? y - conecta + 1 : 0;
            int contador = 0;
            for (; yInicio <= y; yInicio++)
            {
                if (tablero[yInicio, x] == jugador)
                {
                    contador++;
                }
                else
                {
                    contador = 0;
                }
            }
            return contador;
        }

        static int contarDerecha(int x, int y, string jugador, string[,] tablero)
        {
            int xFin = (x + conecta < columnas) ? x + conecta - 1 : columnas - 1;
            int contador = 0;
            for (; x <= xFin; x++)
            {
                if (tablero[y, x] == jugador)
                {
                    contador++;
                }
                else
                {
                    contador = 0;
                }
            }
            return contador;
        }

        static int contarArribaDerecha(int x, int y, string jugador, string[,] tablero)
        {
            int xFin = (x + conecta < columnas) ? x + conecta - 1 : columnas - 1;
            int yInicio = (y - conecta >= 0) ? y - conecta + 1 : 0;
            int contador = 0;
            while (x <= xFin && yInicio <= y)
            {
                if (tablero[y, x] == jugador)
                {
                    contador++;
                }
                else
                {
                    contador = 0;
                }
                x++;
                y--;
            }
            return contador;
        }

        static int contarAbajoDerecha(int x, int y, string jugador, string[,] tablero)
        {
            int xFin = (x + conecta < columnas) ? x + conecta - 1 : columnas - 1;
            int yFin = (y + conecta < filas) ? y + conecta - 1 : filas - 1;
            int contador = 0;
            while (x <= xFin && y <= yFin)
            {
                if (tablero[y, x] == jugador)
                {
                    contador++;
                }
                else
                {
                    contador = 0;
                }
                x++;
                y++;
            }
            return contador;
        }
        static void jugar(int modo)
        {
            string[,] tablero = new string[filas, columnas];
            limpiarTablero(tablero);
            string jugadorActual = elegirJugadorAlAzar();
            Console.WriteLine("Comienza el jugador " + jugadorActual);
            while (true)
            {
                int columna = 0;
                Console.WriteLine("\nTurno del jugador " + jugadorActual);
                dibujarTablero(tablero);
                if (modo == modo_hvscpu)
                {
                    if (jugadorActual == jugador_cpu_2)
                    {
                        Console.Write("CPU 2 pensando...");
                        columna = elegirColumnaCpu(jugadorActual, tablero);
                    }
                    else
                    {
                        columna = solicitarColumnaAJugador();
                    }
                }
                else if (modo == modo_hvsh)
                {
                    columna = solicitarColumnaAJugador();
                }
                int estado = colocarPieza(jugadorActual, columna, tablero);
                if (estado == error_columna_llena)
                {
                    Console.Write("Error: columna llena");
                }
                else if (estado == error_fila_invalidad)
                {
                    Console.Write("Fila no correcta");
                }
                else if (estado == error_ninguno)
                {
                    int g = ganador(jugadorActual, tablero);
                    if (g != no_conecta)
                    {
                        dibujarTablero(tablero);
                        Console.WriteLine("Gana el jugador " + jugadorActual);
                        break;
                    }
                    else if (esEmpate(tablero))
                    {
                        dibujarTablero(tablero);
                        System.Console.Write("Empate");
                        break;
                    }
                }
                jugadorActual = obtenerOponente(jugadorActual);
            }
        }
        static int ganador(string jugador, string[,] tablero)
        {

            int y;
            for (y = 0; y < filas; y++)
            {
                int x;
                for (x = 0; x < columnas; x++)
                {
                    int conteoArriba = contarArriba(x, y, jugador, tablero);
                    if (conteoArriba >= conecta)
                    {
                        return conecta_arriba;
                    }
                    if (contarDerecha(x, y, jugador, tablero) >= conecta)
                    {
                        return conecta_derecha;
                    }
                    if (contarArribaDerecha(x, y, jugador, tablero) >= conecta)
                    {
                        return conecta_arriba_derecha;
                    }
                    if (contarAbajoDerecha(x, y, jugador, tablero) >= conecta)
                    {
                        return conecta_abajo_derecha;
                    }
                }
            }
            return no_conecta;
        }





        static void Main(string[] args)

        {

            Console.WriteLine("1. Modo humano contra humano");
            Console.WriteLine("2. Modo humano contra computadora");
            Console.WriteLine("3. Salir");
            Console.Write("Elige: ");
            int modo = Convert.ToInt32(Console.ReadLine());
            if (modo == modo_hvsh)
            {
                Console.WriteLine("Ingresa el nombre del jugador 1");
                string nombrejugador1 = Console.ReadLine();

                Console.WriteLine("Ingresa el nombre del jugador 2");
                string nombrejugador2 = Console.ReadLine();



                jugar(modo);
                
            }
            else if(modo == modo_hvscpu)
                    {
                Console.WriteLine("Ingrese nombre jugador 1");
                string nombrejugador1 = Console.ReadLine();
                jugar(modo);
            }
            Console.WriteLine("Saliendo...");
            return;

           

        }



 

    }
}
